{"version":3,"sources":["components/Dropdown.js","components/DropdownListItem.js","components/DropdownList.js","App.js","index.js"],"names":["Dropdown","title","open","toggleDropdown","onClick","className","DropdownListItem","item","isItemInSelections","handleClick","value","DropdownList","setOpen","items","wrapperRef","useRef","useState","isVisible","setIsVisible","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","ref","map","id","App","selections","setSelections","some","currentItem","updatedSelectionsArr","filter","selection","showOrHideClass","find","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","ReactDOM","render","StrictMode","getElementById"],"mappings":"kOAYeA,MAZf,YAAoD,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,eAC7B,OACI,sBACIC,QAASD,EACTE,UAAU,qBAFd,UAII,oBAAIA,UAAU,kBAAd,SAAiCJ,IACjC,wBAAQI,UAAU,uBAAlB,SAA0CH,EAAO,QAAU,aCExDI,MATf,YAAsE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,YAClD,OACI,qBAAIL,QAAS,kBAAMK,EAAYF,IAAOF,UAAU,sBAAhD,UACI,sBAAMA,UAAU,6BAAhB,SAA8CE,EAAKG,QACnD,sBAAML,UAAU,uCAAhB,SAAwDG,EAAmBD,SCyBxEI,MA1Bf,YAA4E,IAApDC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,MAAOJ,EAAmC,EAAnCA,YAAaD,EAAsB,EAAtBA,mBAC3CM,EAAaC,iBAAO,MAD6C,EAErCC,oBAAS,GAF4B,mBAEhEC,EAFgE,KAErDC,EAFqD,KAQvE,SAASC,EAAmBC,GACpBN,EAAWO,UAAYP,EAAWO,QAAQC,SAASF,EAAMG,UACzDX,GAAQ,GACRM,GAAa,IAIrB,OAXAM,qBAAU,WACNC,SAASC,iBAAiB,QAASP,KACpC,IAUCF,EACI,oBAAIU,IAAKb,EAAYT,UAAU,gBAA/B,SACKQ,EAAMe,KAAI,SAAArB,GAAI,OACX,cAAC,EAAD,CAAkBA,KAAMA,EAAME,YAAaA,EAA2BD,mBAAoBA,GAA7BD,EAAKsB,SAG1E,MC4CGC,MAhEf,WAAgB,IAAD,EACWd,oBAAS,GADpB,mBACNd,EADM,KACAU,EADA,OAEuBI,mBAAS,IAFhC,mBAENe,EAFM,KAEMC,EAFN,KAoDb,OACE,qBAAK3B,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CAAUJ,MAAM,cAAcC,KAAMA,EAAMC,eAnChD,WACES,GAASV,MAmCJA,EACC,cAAC,EAAD,CAAcU,QAASA,EAASC,MApD1B,CACZ,CACEgB,GAAI,EACJnB,MAAO,wBAET,CACEmB,GAAI,EACJnB,MAAO,sBAET,CACEmB,GAAI,EACJnB,MAAO,+BAyC2CD,YAjCtD,SAAqBF,GAGnB,GAFewB,EAAWE,MAAK,SAAAC,GAAW,OAAIA,EAAYL,KAAOtB,EAAKsB,MAU/D,CAEH,IAAMM,EAAuBJ,EAAWK,QAAO,SAAAC,GAAS,OAAIA,EAAUR,KAAOtB,EAAKsB,MAElFG,EAAc,YAAIG,SANhBH,EAAc,GAAD,mBAAKD,GAAL,CAAiBxB,MAwB0CC,mBAdhF,SAA4BD,GAC1B,IACM+B,EADYP,EAAWQ,MAAK,SAAAF,GAAS,OAAIA,EAAUR,KAAOtB,EAAKsB,MACjC,aAAe,8BAEnD,OACI,qBAAKxB,UAAWiC,EAAiBE,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAYC,MAAM,6BAA7F,SAA0H,sBAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,wBAU3L,WC1DZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,W","file":"static/js/main.d1bb51a4.chunk.js","sourcesContent":["function Dropdown({ title, open, toggleDropdown }) {\n    return (\n        <div\n            onClick={toggleDropdown}\n            className=\"dropdown-container\"\n        >\n            <h2 className=\"dropdown__title\">{title}</h2>\n            <button className=\"dropdown__toggle-btn\">{open ? \"Close\" : \"Open\"}</button>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","function DropdownListItem({ item, isItemInSelections, handleClick }) {\n    return (\n        <li onClick={() => handleClick(item)} className=\"dropdown-list__item\">\n            <span className=\"dropdown-list__item__value\">{item.value}</span>\n            <span className=\"dropdown-list__item__selected-status\">{isItemInSelections(item)}</span>\n        </li>\n    );\n}\n\nexport default DropdownListItem;\n","import React, { useState, useRef, useEffect } from 'react';\nimport DropdownListItem from \"./DropdownListItem\";\n\nfunction DropdownList({ setOpen, items, handleClick, isItemInSelections }) {\n    const wrapperRef = useRef(null);\n    const [isVisible, setIsVisible] = useState(true);\n\n    useEffect(() => {\n        document.addEventListener(\"click\", handleClickOutside);\n    }, []);\n\n    function handleClickOutside(event) {\n        if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n            setOpen(false);\n            setIsVisible(false);\n        }\n    }\n\n    return (\n        isVisible ? (\n            <ul ref={wrapperRef} className=\"dropdown-list\">\n                {items.map(item => (\n                    <DropdownListItem item={item} handleClick={handleClick} key={item.id} isItemInSelections={isItemInSelections} />\n                ))}\n            </ul>\n        ) : null\n    );\n}\n\nexport default DropdownList;\n","import { useState } from \"react\";\n\nimport Dropdown from \"./components/Dropdown\";\nimport DropdownList from \"./components/DropdownList\";\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n  const [selections, setSelections] = useState([]);\n  const multiSelect = true;\n\n  const items = [\n    {\n      id: 1,\n      value: \"A Tale of Two Cities\"\n    },\n    {\n      id: 2,\n      value: \"Great Expectations\"\n    },\n    {\n      id: 3,\n      value: \"The Picture of Dorian Gray\"\n    }\n  ];\n\n  function toggleDropdown() {\n    setOpen(!open);\n  }\n\n  function handleClick(item) {\n    const myItem = selections.some(currentItem => currentItem.id === item.id);\n    \n    if (!myItem) {\n        if (!multiSelect) {\n          // If single select only (multiSelect set to false)\n          setSelections([item]);\n        } else if (multiSelect) {\n          // multiSelect set to true\n          setSelections([...selections, item]);\n        }\n    } else {\n        // Remove item that is already selected\n        const updatedSelectionsArr = selections.filter(selection => selection.id !== item.id);\n        \n        setSelections([...updatedSelectionsArr]);\n    }\n  }\n\n  function isItemInSelections(item) {\n    const isPresent = selections.find(selection => selection.id === item.id);\n    const showOrHideClass = isPresent ? \"check-icon\" : \"check-icon--hide check-icon\";\n\n    return (\n        <svg className={showOrHideClass} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path></svg>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <Dropdown title=\"Select Book\" open={open} toggleDropdown={toggleDropdown} />\n        {open ? (\n          <DropdownList setOpen={setOpen} items={items} handleClick={handleClick} isItemInSelections={isItemInSelections} />\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}